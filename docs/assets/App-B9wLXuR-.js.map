{"version":3,"file":"App-B9wLXuR-.js","sources":["../../node_modules/@react-three/drei/web/useCursor.js","../../node_modules/three-stdlib/postprocessing/Pass.js","../../node_modules/@react-three/drei/core/shaderMaterial.js","../../node_modules/@react-three/drei/helpers/constants.js","../../node_modules/@react-three/drei/core/Fbo.js","../../node_modules/@react-three/drei/core/useIntersect.js","../../node_modules/@react-three/drei/core/RenderTexture.js","../../node_modules/@react-three/drei/core/MeshPortalMaterial.js","../../src/app/pages/npgDemo/modules/LoadPortalScene.tsx","../../src/app/pages/npgDemo/modules/NpgPortalCube.tsx","../../src/components/3d/CameraMovement.tsx","../../src/utils/camera/AddCameraParent.tsx","../../src/app/pages/npgDemo/data/data.tsx","../../src/app/pages/npgDemo/App.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction useCursor(hovered, onPointerOver = 'pointer', onPointerOut = 'auto', container = document.body) {\n  React.useEffect(() => {\n    if (hovered) {\n      container.style.cursor = onPointerOver;\n      return () => void (container.style.cursor = onPointerOut);\n    }\n  }, [hovered]);\n}\n\nexport { useCursor };\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n  dispose() {\n  }\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport {\n  FullScreenQuad,\n  Pass\n};\n//# sourceMappingURL=Pass.js.map\n","import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms);\n      // Create unforms and shaders\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return {\n            ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      });\n      // Create getter/setters\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n\n      // Assign parameters, this might include uniforms\n      Object.assign(this, parameters);\n      // Call onInit\n      if (onInit) onInit(this);\n    }\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n","import { REVISION } from 'three';\n\nconst getVersion = () => parseInt(REVISION.replace(/\\D+/g, ''));\nconst version = /* @__PURE__ */getVersion();\n\nexport { version };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// TODO: consume this from three >r154 when SemVer allows\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(/** Width in pixels, or settings (will render fullscreen by default) */\nwidth, /** Height in pixels */\nheight, /**Settings */\nsettings) {\n  const size = useThree(state => state.size);\n  const viewport = useThree(state => state.viewport);\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n  const {\n    samples = 0,\n    depth,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    const target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n    if (depth) {\n      target.depthTexture = new THREE.DepthTexture(_width, _height, THREE.FloatType);\n    }\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\nconst Fbo = ({\n  children,\n  width,\n  height,\n  ...settings\n}) => {\n  const target = useFBO(width, height, settings);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(target));\n};\n\nexport { Fbo, useFBO };\n","import * as React from 'react';\nimport { addEffect, addAfterEffect } from '@react-three/fiber';\n\nfunction useIntersect(onChange) {\n  const ref = React.useRef(null);\n  const check = React.useRef(false);\n  const temp = React.useRef(false);\n  const callback = React.useRef(onChange);\n  React.useLayoutEffect(() => void (callback.current = onChange), [onChange]);\n  React.useEffect(() => {\n    const obj = ref.current;\n    if (obj) {\n      // Stamp out frustum check pre-emptively\n      const unsub1 = addEffect(() => {\n        check.current = false;\n        return true;\n      });\n      // If the object is inside the frustum three will call onRender\n      const oldOnRender = obj.onBeforeRender;\n      obj.onBeforeRender = () => check.current = true;\n      // Compare the check value against the temp value, if it differs set state\n      const unsub2 = addAfterEffect(() => {\n        if (check.current !== temp.current) callback.current == null || callback.current(temp.current = check.current);\n        return true;\n      });\n      return () => {\n        obj.onBeforeRender = oldOnRender;\n        unsub1();\n        unsub2();\n      };\n    }\n  }, []);\n  return ref;\n}\n\nexport { useIntersect };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\nimport { useFBO } from './Fbo.js';\n\nconst RenderTexture = /* @__PURE__ */React.forwardRef(({\n  children,\n  compute,\n  width,\n  height,\n  samples = 8,\n  renderPriority = 0,\n  eventPriority = 0,\n  frames = Infinity,\n  stencilBuffer = false,\n  depthBuffer = true,\n  generateMipmaps = false,\n  ...props\n}, forwardRef) => {\n  const {\n    size,\n    viewport\n  } = useThree();\n  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {\n    samples,\n    stencilBuffer,\n    depthBuffer,\n    generateMipmaps\n  });\n  const [vScene] = React.useState(() => new THREE.Scene());\n  const uvCompute = React.useCallback((event, state, previous) => {\n    var _fbo$texture, _previous$previousRoo;\n    // Since this is only a texture it does not have an easy way to obtain the parent, which we\n    // need to transform event coordinates to local coordinates. We use r3f internals to find the\n    // next Object3D.\n    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;\n    while (parent && !(parent instanceof THREE.Object3D)) {\n      parent = parent.__r3f.parent;\n    }\n    if (!parent) return false;\n    // First we call the previous state-onion-layers compute, this is what makes it possible to nest portals\n    if (!previous.raycaster.camera) previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());\n    // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n    const [intersection] = previous.raycaster.intersectObject(parent);\n    if (!intersection) return false;\n    // We take that hits uv coords, set up this layers raycaster, et voilÃ , we have raycasting on arbitrary surfaces\n    const uv = intersection.uv;\n    if (!uv) return false;\n    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);\n  }, []);\n  React.useImperativeHandle(forwardRef, () => fbo.texture, [fbo]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal(/*#__PURE__*/React.createElement(Container, {\n    renderPriority: renderPriority,\n    frames: frames,\n    fbo: fbo\n  }, children, /*#__PURE__*/React.createElement(\"group\", {\n    onPointerOver: () => null\n  })), vScene, {\n    events: {\n      compute: compute || uvCompute,\n      priority: eventPriority\n    }\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: fbo.texture\n  }, props)));\n});\n\n// The container component has to be separate, it can not be inlined because \"useFrame(state\" when run inside createPortal will return\n// the portals own state which includes user-land overrides (custom cameras etc), but if it is executed in <RenderTexture>'s render function\n// it would return the default state.\nfunction Container({\n  frames,\n  renderPriority,\n  children,\n  fbo\n}) {\n  let count = 0;\n  let oldAutoClear;\n  let oldXrEnabled;\n  let oldRenderTarget;\n  let oldIsPresenting;\n  useFrame(state => {\n    if (frames === Infinity || count < frames) {\n      oldAutoClear = state.gl.autoClear;\n      oldXrEnabled = state.gl.xr.enabled;\n      oldRenderTarget = state.gl.getRenderTarget();\n      oldIsPresenting = state.gl.xr.isPresenting;\n      state.gl.autoClear = true;\n      state.gl.xr.enabled = false;\n      state.gl.xr.isPresenting = false;\n      state.gl.setRenderTarget(fbo);\n      state.gl.render(state.scene, state.camera);\n      state.gl.setRenderTarget(oldRenderTarget);\n      state.gl.autoClear = oldAutoClear;\n      state.gl.xr.enabled = oldXrEnabled;\n      state.gl.xr.isPresenting = oldIsPresenting;\n      count++;\n    }\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nexport { RenderTexture };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useIntersect } from './useIntersect.js';\nimport { useFBO } from './Fbo.js';\nimport { RenderTexture } from './RenderTexture.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { FullScreenQuad } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nconst PortalMaterialImpl = /* @__PURE__ */shaderMaterial({\n  blur: 0,\n  map: null,\n  sdf: null,\n  blend: 0,\n  size: 0,\n  resolution: /* @__PURE__ */new THREE.Vector2()\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n     vUv = uv;\n   }`, `uniform sampler2D sdf;\n   uniform sampler2D map;\n   uniform float blur;\n   uniform float size;\n   uniform float time;\n   uniform vec2 resolution;\n   varying vec2 vUv;\n   #include <packing>\n   void main() {\n     vec2 uv = gl_FragCoord.xy / resolution.xy;\n     vec4 t = texture2D(map, uv);\n     float k = blur;\n     float d = texture2D(sdf, vUv).r/size;\n     float alpha = 1.0 - smoothstep(0.0, 1.0, clamp(d/k + 1.0, 0.0, 1.0));\n     gl_FragColor = vec4(t.rgb, blur == 0.0 ? t.a : t.a * alpha);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nconst MeshPortalMaterial = /* @__PURE__ */React.forwardRef(({\n  children,\n  events = undefined,\n  blur = 0,\n  eventPriority = 0,\n  renderPriority = 0,\n  worldUnits = false,\n  resolution = 512,\n  ...props\n}, fref) => {\n  extend({\n    PortalMaterialImpl\n  });\n  const ref = React.useRef(null);\n  const {\n    scene,\n    gl,\n    size,\n    viewport,\n    setEvents\n  } = useThree();\n  const maskRenderTarget = useFBO(resolution, resolution);\n  const [priority, setPriority] = React.useState(0);\n  useFrame(() => {\n    // If blend is > 0 then the portal is being entered, the render-priority must change\n    const p = ref.current.blend > 0 ? Math.max(1, renderPriority) : 0;\n    if (priority !== p) setPriority(p);\n  });\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: !events\n    });\n  }, [events]);\n  const [visible, setVisible] = React.useState(true);\n  // See if the parent mesh is in the camera frustum\n  const parent = useIntersect(setVisible);\n  React.useLayoutEffect(() => {\n    var _ref$current;\n    // Since the ref above is not tied to a mesh directly (we're inside a material),\n    // it has to be tied to the parent mesh here\n    parent.current = (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.parent;\n  }, []);\n  React.useLayoutEffect(() => {\n    if (!parent.current) return;\n\n    // Apply the SDF mask only once\n    if (blur && ref.current.sdf === null) {\n      const tempMesh = new THREE.Mesh(parent.current.geometry, new THREE.MeshBasicMaterial());\n      const boundingBox = new THREE.Box3().setFromBufferAttribute(tempMesh.geometry.attributes.position);\n      const orthoCam = new THREE.OrthographicCamera(boundingBox.min.x * (1 + 2 / resolution), boundingBox.max.x * (1 + 2 / resolution), boundingBox.max.y * (1 + 2 / resolution), boundingBox.min.y * (1 + 2 / resolution), 0.1, 1000);\n      orthoCam.position.set(0, 0, 1);\n      orthoCam.lookAt(0, 0, 0);\n      gl.setRenderTarget(maskRenderTarget);\n      gl.render(tempMesh, orthoCam);\n      const sg = makeSDFGenerator(resolution, resolution, gl);\n      const sdf = sg(maskRenderTarget.texture);\n      const readSdf = new Float32Array(resolution * resolution);\n      gl.readRenderTargetPixels(sdf, 0, 0, resolution, resolution, readSdf);\n      // Get smallest value in sdf\n      let min = Infinity;\n      for (let i = 0; i < readSdf.length; i++) {\n        if (readSdf[i] < min) min = readSdf[i];\n      }\n      min = -min;\n      ref.current.size = min;\n      ref.current.sdf = sdf.texture;\n      gl.setRenderTarget(null);\n    }\n  }, [resolution, blur]);\n  React.useImperativeHandle(fref, () => ref.current);\n  const compute = React.useCallback((event, state, previous) => {\n    var _ref$current2;\n    if (!parent.current) return false;\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, state.camera);\n    if (((_ref$current2 = ref.current) == null ? void 0 : _ref$current2.blend) === 0) {\n      // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n      const [intersection] = state.raycaster.intersectObject(parent.current);\n      if (!intersection) {\n        // Cancel out the raycast camera if the parent mesh isn't hit\n        state.raycaster.camera = undefined;\n        return false;\n      }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"portalMaterialImpl\", _extends({\n    ref: ref,\n    blur: blur,\n    blend: 0,\n    resolution: [size.width * viewport.dpr, size.height * viewport.dpr],\n    attach: \"material\"\n  }, props), /*#__PURE__*/React.createElement(RenderTexture, {\n    attach: \"map\",\n    frames: visible ? Infinity : 0,\n    eventPriority: eventPriority,\n    renderPriority: renderPriority,\n    compute: compute\n  }, children, /*#__PURE__*/React.createElement(ManagePortalScene, {\n    events: events,\n    rootScene: scene,\n    priority: priority,\n    material: ref,\n    worldUnits: worldUnits\n  })));\n});\nfunction ManagePortalScene({\n  events = undefined,\n  rootScene,\n  material,\n  priority,\n  worldUnits\n}) {\n  const scene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  const buffer1 = useFBO();\n  const buffer2 = useFBO();\n  React.useLayoutEffect(() => {\n    scene.matrixAutoUpdate = false;\n  }, []);\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: events\n    });\n  }, [events]);\n  const [quad, blend] = React.useMemo(() => {\n    // This fullscreen-quad is used to blend the two textures\n    const blend = {\n      value: 0\n    };\n    const quad = new FullScreenQuad(new THREE.ShaderMaterial({\n      uniforms: {\n        a: {\n          value: buffer1.texture\n        },\n        b: {\n          value: buffer2.texture\n        },\n        blend\n      },\n      vertexShader: /*glsl*/`\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n          }`,\n      fragmentShader: /*glsl*/`\n          uniform sampler2D a;\n          uniform sampler2D b;\n          uniform float blend;\n          varying vec2 vUv;\n          #include <packing>\n          void main() {\n            vec4 ta = texture2D(a, vUv);\n            vec4 tb = texture2D(b, vUv);\n            gl_FragColor = mix(tb, ta, blend);\n            #include <tonemapping_fragment>\n            #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n          }`\n    }));\n    return [quad, blend];\n  }, []);\n  useFrame(state => {\n    var _material$current;\n    let parent = material == null || (_material$current = material.current) == null ? void 0 : _material$current.__r3f.parent;\n    if (parent) {\n      // Move portal contents along with the parent if worldUnits is true\n      if (!worldUnits) {\n        var _material$current2;\n        // If the portal renders exclusively the original scene needs to be updated\n        if (priority && ((_material$current2 = material.current) == null ? void 0 : _material$current2.blend) === 1) parent.updateWorldMatrix(true, false);\n        scene.matrixWorld.copy(parent.matrixWorld);\n      } else scene.matrixWorld.identity();\n\n      // This bit is only necessary if the portal is blended, now it has a render-priority\n      // and will take over the render loop\n      if (priority) {\n        var _material$current3, _material$current4, _material$current5;\n        if (((_material$current3 = material.current) == null ? void 0 : _material$current3.blend) > 0 && ((_material$current4 = material.current) == null ? void 0 : _material$current4.blend) < 1) {\n          // If blend is ongoing (> 0 and < 1) then we need to render both the root scene\n          // and the portal scene, both will then be mixed in the quad from above\n          blend.value = material.current.blend;\n          state.gl.setRenderTarget(buffer1);\n          state.gl.render(scene, state.camera);\n          state.gl.setRenderTarget(buffer2);\n          state.gl.render(rootScene, state.camera);\n          state.gl.setRenderTarget(null);\n          quad.render(state.gl);\n        } else if (((_material$current5 = material.current) == null ? void 0 : _material$current5.blend) === 1) {\n          // However if blend is 1 we only need to render the portal scene\n          state.gl.render(scene, state.camera);\n        }\n      }\n    }\n  }, priority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\nconst makeSDFGenerator = (clientWidth, clientHeight, renderer) => {\n  let finalTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.LinearMipmapLinearFilter,\n    magFilter: THREE.LinearFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat,\n    generateMipmaps: true\n  });\n  let outsideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  let insideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  const uvRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const uvRenderInside = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (1.0 - round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const jumpFloodRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      offset: {\n        value: 0.0\n      },\n      level: {\n        value: 0.0\n      },\n      maxSteps: {\n        value: 0.0\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform float offset;\n        uniform float level;\n        uniform float maxSteps;\n        #include <packing>\n        void main() {\n          float closestDist = 9999999.9;\n          vec2 closestPos = vec2(0.0);\n          for (float x = -1.0; x <= 1.0; x += 1.0) {\n            for (float y = -1.0; y <= 1.0; y += 1.0) {\n              vec2 voffset = vUv;\n              voffset += vec2(x, y) * vec2(${1 / clientWidth}, ${1 / clientHeight}) * offset;\n              vec2 pos = unpackRGBATo2Half(texture2D(tex, voffset));\n              float dist = distance(pos.xy, vUv);\n              if(pos.x != 0.0 && pos.y != 0.0 && dist < closestDist) {\n                closestDist = dist;\n                closestPos = pos;\n              }\n            }\n          }\n          gl_FragColor = pack2HalfToRGBA(closestPos);\n        }`\n  }));\n  const distanceFieldRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      size: {\n        value: new THREE.Vector2(clientWidth, clientHeight)\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform vec2 size;\n        #include <packing>\n        void main() {\n          gl_FragColor = vec4(distance(size * unpackRGBATo2Half(texture2D(tex, vUv)), size * vUv), 0.0, 0.0, 0.0);\n        }`\n  }));\n  const compositeRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      inside: {\n        value: insideRenderTargetFinal.texture\n      },\n      outside: {\n        value: outsideRenderTargetFinal.texture\n      },\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D inside;\n        uniform sampler2D outside;\n        uniform sampler2D tex;\n        #include <packing>\n        void main() {\n          float i = texture2D(inside, vUv).x;\n          float o =texture2D(outside, vUv).x;\n          if (texture2D(tex, vUv).x == 0.0) {\n            gl_FragColor = vec4(o, 0.0, 0.0, 0.0);\n          } else {\n            gl_FragColor = vec4(-i, 0.0, 0.0, 0.0);\n          }\n        }`\n  }));\n  return image => {\n    let ft = finalTarget;\n    image.minFilter = THREE.NearestFilter;\n    image.magFilter = THREE.NearestFilter;\n    uvRender.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(outsideRenderTarget);\n    uvRender.render(renderer);\n    const passes = Math.ceil(Math.log(Math.max(clientWidth, clientHeight)) / Math.log(2.0));\n    let lastTarget = outsideRenderTarget;\n    let target = null;\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === outsideRenderTarget ? outsideRenderTarget2 : outsideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(outsideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    uvRenderInside.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(insideRenderTarget);\n    uvRenderInside.render(renderer);\n    lastTarget = insideRenderTarget;\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === insideRenderTarget ? insideRenderTarget2 : insideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(insideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    renderer.setRenderTarget(ft);\n    compositeRender.material.uniforms.tex.value = image;\n    compositeRender.render(renderer);\n    renderer.setRenderTarget(null);\n    return ft;\n  };\n};\n\nexport { MeshPortalMaterial };\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst LoadPortalScene: React.FC<{ portalId: number; maxScroll: number; children?: React.ReactNode }> = ({ portalId, maxScroll, children }) => {\r\n  console.log(`Loading portal scene ${portalId}`);\r\n\r\n  const groupRef = useRef<THREE.Group>(null);\r\n  const [scrollOffset, setScrollOffset] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const handleWheel = (event: WheelEvent) => {\r\n      // Update the scroll offset based on the wheel delta\r\n      setScrollOffset((prevOffset) => THREE.MathUtils.clamp(prevOffset + event.deltaY * 0.003, 0, maxScroll));\r\n    };\r\n\r\n    // Attach the wheel event listener\r\n    window.addEventListener(\"wheel\", handleWheel);\r\n\r\n    return () => {\r\n      // Clean up the event listener\r\n      window.removeEventListener(\"wheel\", handleWheel);\r\n    };\r\n  }, [maxScroll]);\r\n\r\n  useFrame(() => {\r\n    if (groupRef.current) {\r\n      // Update the group's position based on the scroll offset\r\n      groupRef.current.position.y = +scrollOffset; // Negative for upward movement\r\n    }\r\n  });\r\n\r\n  return <group ref={groupRef}>{children}</group>;\r\n};\r\n\r\nexport default LoadPortalScene;\r\n","import React, { useMemo, useRef, useEffect, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useCursor, useGLTF } from \"@react-three/drei\";\r\nimport { MeshPortalMaterial, Text } from \"@react-three/drei\";\r\nimport { animated, useSpring } from \"@react-spring/three\";\r\nimport LoadPortalScene from \"./LoadPortalScene\";\r\nimport BackButton from \"@2dc/BackButton\";\r\nimport { basePath } from \"@/app/Routing\";\r\n\r\nexport interface PortalCubeProps {\r\n\tcubeModelPath: string;\r\n\tportalData: PortalData[];\r\n\trotationSpeed?: number;\r\n}\r\n\r\nexport interface PortalData {\r\n\tmeshId: string;\r\n\ttexturePath: string;\r\n\tnormal: THREE.Vector3;\r\n\theader: string;\r\n\ttagline?: string;\r\n}\r\n\r\nexport interface Portal {\r\n\tid: number;\r\n\tnode: THREE.Mesh;\r\n\ttexture: THREE.Texture;\r\n\tnormal: THREE.Vector3;\r\n\theader: string;\r\n\ttagline?: string;\r\n}\r\n\r\nconst NpgPortalCube: React.FC<PortalCubeProps> = ({ cubeModelPath, portalData, rotationSpeed = 0.01 }) => {\r\n\tconst { camera, scene } = useThree();\r\n\r\n\t// Load the GLTF model and extract nodes\r\n\tconst { nodes } = useGLTF(cubeModelPath);\r\n\r\n\tconst [currentPortal, setCurrentPortal] = useState<Portal | null>(null);\r\n\tconst [isInPortal, setIsInPortal] = useState(false);\r\n\r\n\t// State to keep track of visible portals\r\n\tconst [visiblePortals, setVisiblePortals] = useState<number[]>([]);\r\n\tconst isAnimating = useRef(false);\r\n\r\n\tconst animatingTransition = useRef(false);\r\n\r\n\t// References for the group and quaternion\r\n\tconst groupRef = useRef<THREE.Group>(null);\r\n\tconst quaternion = useRef(new THREE.Quaternion());\r\n\r\n\t// Flags and variables for dragging functionality\r\n\tconst isDragging = useRef(false);\r\n\tconst lastMousePosition = useRef({ x: 0, y: 0 });\r\n\r\n\t// Camera position\r\n\tconst cameraLocation = useThree((state) => state.camera.position.clone());\r\n\r\n\t// Axes and temporary quaternions for rotation calculations\r\n\tconst xAxis = useRef(new THREE.Vector3(1, 0, 0));\r\n\tconst yAxis = useRef(new THREE.Vector3(0, 1, 0));\r\n\tconst tempQuatX = useRef(new THREE.Quaternion());\r\n\tconst tempQuatY = useRef(new THREE.Quaternion());\r\n\r\n\tconst portals = useMemo(() => {\r\n\t\tconst textureLoader = new THREE.TextureLoader();\r\n\t\treturn portalData.map((data, index) => ({\r\n\t\t\tid: index,\r\n\t\t\tnode: nodes[data.meshId] as THREE.Mesh,\r\n\t\t\ttexture: textureLoader.load(data.texturePath, (texture) => (texture.flipY = false)),\r\n\t\t\tnormal: data.normal,\r\n\t\t\theader: data.header,\r\n\t\t\ttagline: data.tagline,\r\n\t\t}));\r\n\t}, []);\r\n\r\n\t// Spring animation for rotating the cube to the closest face\r\n\tconst [rotation, api] = useSpring(() => ({\r\n\t\tspringRotation: groupRef.current ? [groupRef.current.rotation.x, groupRef.current.rotation.y, groupRef.current.rotation.z] : [0, 0, 0],\r\n\t\tconfig: { mass: 2, tension: 300, friction: 40, precision: 0.01 },\r\n\t\tonStart: () => {\r\n\t\t\tisAnimating.current = true;\r\n\t\t},\r\n\t\tonRest: () => {\r\n\t\t\tisAnimating.current = false;\r\n\t\t},\r\n\t}));\r\n\r\n\tconst calculateVisiblePortals = () => {\r\n\t\tif (!groupRef.current) return;\r\n\r\n\t\tconst worldMatrix = groupRef.current.matrixWorld;\r\n\t\tconst updatedVisiblePortals: number[] = [];\r\n\r\n\t\tportals.forEach(({ id, normal }) => {\r\n\t\t\t// Transform the normal to world space\r\n\t\t\tconst worldNormal = normal.clone().applyMatrix4(worldMatrix).normalize();\r\n\t\t\tconst toCamera = cameraLocation.clone().sub(groupRef.current!.position).normalize();\r\n\r\n\t\t\t// Check visibility using the dot product\r\n\t\t\tif (worldNormal.dot(toCamera) > 0) {\r\n\t\t\t\tupdatedVisiblePortals.push(id);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsetVisiblePortals(updatedVisiblePortals);\r\n\t};\r\n\r\n\t// ** Pointer events for dragging the cube **\r\n\r\n\t// Start dragging the cube when pointer is down\r\n\tconst handlePointerDown = (e: PointerEvent) => {\r\n\t\tif (animatingTransition.current) return;\r\n\t\tisDragging.current = true;\r\n\t\tlastMousePosition.current = { x: e.clientX, y: e.clientY };\r\n\t};\r\n\r\n\t// Rotate the cube when pointer is moved and dragging\r\n\tconst handlePointerMove = (e: PointerEvent) => {\r\n\t\tif (!isDragging.current || !groupRef.current) return;\r\n\t\tif (animatingTransition.current) return;\r\n\r\n\t\tconst deltaX = e.clientX - lastMousePosition.current.x;\r\n\t\tconst deltaY = e.clientY - lastMousePosition.current.y;\r\n\r\n\t\t// Update temporary quaternions for rotation\r\n\t\ttempQuatX.current.setFromAxisAngle(xAxis.current, deltaY * rotationSpeed);\r\n\t\ttempQuatY.current.setFromAxisAngle(yAxis.current, deltaX * rotationSpeed);\r\n\r\n\t\t// Combine rotations and update quaternion\r\n\t\tquaternion.current.multiplyQuaternions(tempQuatY.current, quaternion.current); // Apply Y first\r\n\t\tquaternion.current.multiplyQuaternions(tempQuatX.current, quaternion.current); // Apply X next\r\n\r\n\t\t// Apply the quaternion to the group\r\n\t\tgroupRef.current.quaternion.copy(quaternion.current);\r\n\t\tconst euler = new THREE.Euler().setFromQuaternion(quaternion.current);\r\n\r\n\t\t// Spring animation\r\n\t\tapi.start({\r\n\t\t\tfrom: { springRotation: [groupRef.current.rotation.x, groupRef.current.rotation.y, groupRef.current.rotation.z] },\r\n\t\t\tto: { springRotation: [euler.x, euler.y, euler.z] },\r\n\t\t});\r\n\r\n\t\t// Update the last mouse position\r\n\t\tlastMousePosition.current = { x: e.clientX, y: e.clientY };\r\n\t};\r\n\r\n\t// Stop dragging the cube when pointer is up, and align the cube to the closest face\r\n\tconst handlePointerUp = () => {\r\n\t\tisDragging.current = false;\r\n\r\n\t\t// Align cube to the closest face\r\n\t\talignCubeToClosestFace();\r\n\t};\r\n\r\n\t// Align the cube so the face that is closest to the camera is facing the camera head-on\r\n\tconst alignCubeToClosestFace = () => {\r\n\t\tif (!groupRef.current) return;\r\n\t\t// calculate what face is the closest to facing the camera\r\n\t\tconst closestFace = portals.reduce(\r\n\t\t\t(closest, portal) => {\r\n\t\t\t\tconst normal = portal.normal.clone().applyQuaternion(groupRef.current!.quaternion);\r\n\t\t\t\tconst dot = normal.dot(cameraLocation.clone().sub(groupRef.current!.position).normalize());\r\n\t\t\t\treturn dot > closest.dot ? { id: portal.id, dot } : closest;\r\n\t\t\t},\r\n\t\t\t{ id: -1, dot: -Infinity }\r\n\t\t);\r\n\r\n\t\tfunction normalizeRotation(targetValue: number, currentValue: number) {\r\n\t\t\t// Check if the target value is more or less that 180 degrees from the current value\r\n\t\t\tconst diff = targetValue - currentValue;\r\n\t\t\tif (diff > Math.PI + Math.PI / 2) return targetValue - Math.PI * 2;\r\n\t\t\tif (diff > Math.PI / 2) return targetValue - Math.PI;\r\n\t\t\tif (diff < -Math.PI - Math.PI / 2) return targetValue + Math.PI * 2;\r\n\t\t\tif (diff < -Math.PI / 2) return targetValue + Math.PI;\r\n\t\t\treturn targetValue;\r\n\t\t}\r\n\r\n\t\tconst isCubeUpright = (targetRotation: THREE.Euler, upVector: THREE.Vector3) => {\r\n\t\t\tconst targetQuaternion = new THREE.Quaternion().setFromEuler(targetRotation);\r\n\t\t\tupVector.applyQuaternion(targetQuaternion);\r\n\t\t\tconst dot = upVector.dot(new THREE.Vector3(0, 1, 0));\r\n\t\t\treturn dot > 0;\r\n\t\t};\r\n\r\n\t\tlet targetRotation = new THREE.Euler();\r\n\r\n\t\t// Align the cube to the closest face\r\n\t\tswitch (closestFace.id) {\r\n\t\t\tcase 0: // Back -- Design\r\n\t\t\t\tquaternion.current.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\r\n\t\t\t\ttargetRotation = new THREE.Euler(0, Math.PI, 0);\r\n\t\t\t\ttargetRotation.x = normalizeRotation(targetRotation.x, groupRef.current.rotation.x);\r\n\t\t\t\ttargetRotation.y = normalizeRotation(targetRotation.y, groupRef.current.rotation.y);\r\n\t\t\t\ttargetRotation.z = normalizeRotation(targetRotation.z, groupRef.current.rotation.z);\r\n\t\t\t\t// Flip the cube if it's upside down\r\n\t\t\t\tif (!isCubeUpright(targetRotation, new THREE.Vector3(0, 1, 0))) {\r\n\t\t\t\t\ttargetRotation.z += Math.PI;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: // Bottom -- Event\r\n\t\t\t\tquaternion.current.setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);\r\n\t\t\t\ttargetRotation = new THREE.Euler(-Math.PI / 2, 0, 0);\r\n\t\t\t\ttargetRotation.x = normalizeRotation(targetRotation.x, groupRef.current.rotation.x);\r\n\t\t\t\ttargetRotation.y = normalizeRotation(targetRotation.y, groupRef.current.rotation.y);\r\n\t\t\t\ttargetRotation.z = normalizeRotation(targetRotation.z, groupRef.current.rotation.z);\r\n\t\t\t\t// Flip the cube if it's upside down\r\n\t\t\t\tif (!isCubeUpright(targetRotation, new THREE.Vector3(0, 0, 1))) {\r\n\t\t\t\t\ttargetRotation.y += Math.PI;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Top -- Exibition\r\n\t\t\t\tquaternion.current.setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2);\r\n\t\t\t\ttargetRotation = new THREE.Euler(Math.PI / 2, 0, 0);\r\n\t\t\t\ttargetRotation.x = normalizeRotation(targetRotation.x, groupRef.current.rotation.x);\r\n\t\t\t\ttargetRotation.y = normalizeRotation(targetRotation.y, groupRef.current.rotation.y);\r\n\t\t\t\ttargetRotation.z = normalizeRotation(targetRotation.z, groupRef.current.rotation.z);\r\n\t\t\t\t// Flip the cube if it's upside down\r\n\t\t\t\tif (!isCubeUpright(targetRotation, new THREE.Vector3(0, 0, -1))) {\r\n\t\t\t\t\ttargetRotation.y += Math.PI;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: // Right -- Interactive\r\n\t\t\t\tquaternion.current.setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2);\r\n\t\t\t\ttargetRotation = new THREE.Euler(0, -Math.PI / 2, 0);\r\n\t\t\t\ttargetRotation.x = normalizeRotation(targetRotation.x, groupRef.current.rotation.x);\r\n\t\t\t\ttargetRotation.y = normalizeRotation(targetRotation.y, groupRef.current.rotation.y);\r\n\t\t\t\ttargetRotation.z = normalizeRotation(targetRotation.z, groupRef.current.rotation.z);\r\n\t\t\t\t// Flip the cube if it's upside down\r\n\t\t\t\tif (!isCubeUpright(targetRotation, new THREE.Vector3(0, 1, 0))) {\r\n\t\t\t\t\ttargetRotation.z -= Math.PI / 2;\r\n\t\t\t\t\ttargetRotation.y += Math.PI;\r\n\t\t\t\t\ttargetRotation.x += Math.PI / 2;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4: // Front -- Marketing\r\n\t\t\t\tquaternion.current.set(0, 0, 0, 1);\r\n\t\t\t\ttargetRotation = new THREE.Euler(0, 0, 0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5: // Left -- Sport\r\n\t\t\t\tquaternion.current.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);\r\n\t\t\t\ttargetRotation = new THREE.Euler(0, Math.PI / 2, 0);\r\n\t\t\t\ttargetRotation.x = normalizeRotation(targetRotation.x, groupRef.current.rotation.x);\r\n\t\t\t\ttargetRotation.y = normalizeRotation(targetRotation.y, groupRef.current.rotation.y);\r\n\t\t\t\ttargetRotation.z = normalizeRotation(targetRotation.z, groupRef.current.rotation.z);\r\n\t\t\t\t// Flip the cube if it's upside down\r\n\t\t\t\tif (!isCubeUpright(targetRotation, new THREE.Vector3(0, 1, 0))) {\r\n\t\t\t\t\ttargetRotation.z += Math.PI / 2;\r\n\t\t\t\t\ttargetRotation.y += Math.PI;\r\n\t\t\t\t\ttargetRotation.x += Math.PI / 2;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\ttargetRotation = new THREE.Euler(0, 0, 0);\r\n\t\t}\r\n\r\n\t\t// Start the spring animation\r\n\t\tapi.start({\r\n\t\t\tfrom: { springRotation: [groupRef.current.rotation.x, groupRef.current.rotation.y, groupRef.current.rotation.z] },\r\n\t\t\tto: { springRotation: [targetRotation.x, targetRotation.y, targetRotation.z] },\r\n\t\t});\r\n\t};\r\n\r\n\t// find the camera parent in the scene\r\n\tconst cameraParentRef = scene.children.find((child) => child.name === \"Camera Parent\") as THREE.Group;\r\n\tif (!cameraParentRef) {\r\n\t\tthrow new Error(\"Camera parent not found in the scene\");\r\n\t} else {\r\n\t\tcameraParentRef.add(camera);\r\n\t}\r\n\r\n\tconst [portalTransitionSpring, transitionApi] = useSpring(() => ({\r\n\t\tcameraPosition: [0, 0, 0],\r\n\t\tbackgroundColor: \"#ffffff\", // Initial background color\r\n\t\tconfig: { mass: 1, tension: 300, friction: 80, precision: 0.01, clamp: true },\r\n\t}));\r\n\r\n\tconst enterPortal = (portalId: number) => {\r\n\t\tsetCurrentPortal(portals[portalId]);\r\n\t\ttransitionApi.start({\r\n\t\t\tto: { cameraPosition: [0, 0.5, -2], backgroundColor: \"#000000\" },\r\n\t\t\tonStart: () => {\r\n\t\t\t\tanimatingTransition.current = true;\r\n\t\t\t},\r\n\t\t\tonRest: () => {\r\n\t\t\t\tanimatingTransition.current = false;\r\n\t\t\t\tsetIsInPortal(true);\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tconst exitPortal = () => {\r\n\t\tsetIsInPortal(false);\r\n\t\tsetCurrentPortal(null);\r\n\t\ttransitionApi.start({\r\n\t\t\tto: { cameraPosition: [0, 0, 0], backgroundColor: \"#ffffff\" },\r\n\t\t\tonStart: () => {\r\n\t\t\t\tanimatingTransition.current = true;\r\n\t\t\t},\r\n\t\t\tonRest: () => {\r\n\t\t\t\tanimatingTransition.current = false;\r\n\t\t\t\tcalculateVisiblePortals();\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tuseFrame(() => {\r\n\t\tif (!isInPortal) {\r\n\t\t\tcalculateVisiblePortals();\r\n\t\t}\r\n\r\n\t\tif (animatingTransition.current) {\r\n\t\t\tconst [x, y, z] = portalTransitionSpring.cameraPosition.get();\r\n\t\t\tcameraParentRef.position.set(x, y, z);\r\n\t\t\tscene.background = new THREE.Color(portalTransitionSpring.backgroundColor.get());\r\n\t\t}\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"pointerdown\", handlePointerDown);\r\n\t\twindow.addEventListener(\"pointerup\", handlePointerUp);\r\n\t\twindow.addEventListener(\"pointermove\", handlePointerMove);\r\n\r\n\t\t// Calculate initial visibility\r\n\t\tcalculateVisiblePortals();\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"pointerdown\", handlePointerDown);\r\n\t\t\twindow.removeEventListener(\"pointerup\", handlePointerUp);\r\n\t\t\twindow.removeEventListener(\"pointermove\", handlePointerMove);\r\n\t\t};\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!isInPortal && (\r\n\t\t\t\t<animated.group\r\n\t\t\t\t\tref={groupRef} /// @ts-expect-error Rotation is not assignable to type 'THREE.Euler', but actually it is\r\n\t\t\t\t\trotation={rotation.springRotation}\r\n\t\t\t\t>\r\n\t\t\t\t\t{visiblePortals.map((id) => {\r\n\t\t\t\t\t\tconst { node, texture, header, tagline } = portals[id];\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<PortalObject\r\n\t\t\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\t\t\tnode={node}\r\n\t\t\t\t\t\t\t\ttexture={texture}\r\n\t\t\t\t\t\t\t\theader={header}\r\n\t\t\t\t\t\t\t\ttagline={tagline}\r\n\t\t\t\t\t\t\t\tinTransition={animatingTransition.current}\r\n\t\t\t\t\t\t\t\tonEnterPortal={() => enterPortal(id)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</animated.group>\r\n\t\t\t)}\r\n\r\n\t\t\t{/* Render portal mesh when inside a portal */}\r\n\t\t\t{isInPortal && currentPortal && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<BackButton onClick={exitPortal}>Back</BackButton>\r\n\t\t\t\t\t<group position={groupRef.current?.position} rotation={groupRef.current?.rotation}>\r\n\t\t\t\t\t\t<group position={currentPortal.node.position} rotation={currentPortal.node.rotation}>\r\n\t\t\t\t\t\t\t<LoadPortalScene portalId={currentPortal.id} maxScroll={1000}>\r\n\t\t\t\t\t\t\t\t<PortalText header={currentPortal.header} tagline={currentPortal.tagline || \"\"} />\r\n\t\t\t\t\t\t\t\t<mesh geometry={currentPortal.node.geometry} position={[0, -0.5, -3]} scale={1.5}>\r\n\t\t\t\t\t\t\t\t\t<meshBasicMaterial map={currentPortal.texture} />\r\n\t\t\t\t\t\t\t\t</mesh>\r\n\t\t\t\t\t\t\t</LoadPortalScene>\r\n\t\t\t\t\t\t</group>\r\n\t\t\t\t\t</group>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nfunction PortalObject({\r\n\tnode,\r\n\ttexture,\r\n\theader,\r\n\tinTransition,\r\n\tonEnterPortal,\r\n\ttagline = \"\",\r\n}: {\r\n\tnode: THREE.Mesh;\r\n\ttexture: THREE.Texture;\r\n\theader: string;\r\n\tinTransition: boolean;\r\n\tonEnterPortal: () => void;\r\n\ttagline?: string;\r\n}) {\r\n\tconst { geometry, position, rotation } = node;\r\n\tconst [animateOpacity, setAnimateOpacity] = useState(false);\r\n\tconst [showText, setShowText] = useState(false);\r\n\tconst [hovered, setHovered] = useState(false);\r\n\tconst [Opacity, setOpacity] = useState(0);\r\n\tuseCursor(hovered);\r\n\r\n\tconst { scale } = useSpring({\r\n\t\tscale: hovered ? 1.1 : 1,\r\n\t\tconfig: { mass: 2, tension: 400, friction: 40 },\r\n\t});\r\n\r\n\tconst { textOpacity } = useSpring({\r\n\t\ttextOpacity: showText ? 1 : 0,\r\n\t\tconfig: { duration: 500 },\r\n\t\tonStart: () => {\r\n\t\t\tsetAnimateOpacity(true);\r\n\t\t},\r\n\t\tonRest: () => {\r\n\t\t\tsetAnimateOpacity(false);\r\n\t\t},\r\n\t});\r\n\r\n\tuseFrame(() => {\r\n\t\tif (animateOpacity) {\r\n\t\t\tsetOpacity(textOpacity.get());\r\n\t\t}\r\n\t});\r\n\r\n\tconst fontSize = header === \"Sport &\\nCommunication\" ? 0.3 : 0.4;\r\n\tconst textHeight = header === \"Sport &\\nCommunication\" ? 1.2 : 1.4;\r\n\r\n\treturn (\r\n\t\t<animated.mesh\r\n\t\t\tgeometry={geometry}\r\n\t\t\tposition={position}\r\n\t\t\trotation={rotation}\r\n\t\t\tscale={scale}\r\n\t\t\tonPointerOver={() => {\r\n\t\t\t\tsetHovered(true);\r\n\t\t\t\tsetShowText(true);\r\n\t\t\t}}\r\n\t\t\tonPointerOut={() => {\r\n\t\t\t\tsetHovered(false);\r\n\t\t\t\tif (!inTransition) {\r\n\t\t\t\t\tsetShowText(false);\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t\tonClick={() => {\r\n\t\t\t\tsetShowText(true);\r\n\t\t\t\tsetHovered(false);\r\n\t\t\t\tonEnterPortal();\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<MeshPortalMaterial>\r\n\t\t\t\t<Text\r\n\t\t\t\t\tfont={`${basePath || \"\"}/fonts/RedHatDisplay-SemiBold.ttf`}\r\n\t\t\t\t\tcolor=\"#ffffff\"\r\n\t\t\t\t\tanchorY=\"top\"\r\n\t\t\t\t\tanchorX=\"left\"\r\n\t\t\t\t\tposition={[-1.1, 2, 1]}\r\n\t\t\t\t\tfontSize={fontSize}\r\n\t\t\t\t>\r\n\t\t\t\t\t{header}\r\n\t\t\t\t</Text>\r\n\t\t\t\t{tagline && (\r\n\t\t\t\t\t<Text\r\n\t\t\t\t\t\tfont={`${basePath || \"\"}/fonts/RedHatDisplay-Regular.ttf`}\r\n\t\t\t\t\t\tcolor=\"#ffffff\"\r\n\t\t\t\t\t\tfillOpacity={Opacity}\r\n\t\t\t\t\t\tanchorY=\"top\"\r\n\t\t\t\t\t\tanchorX=\"left\"\r\n\t\t\t\t\t\tposition={[-1, textHeight, 1]}\r\n\t\t\t\t\t\tfontSize={0.1}\r\n\t\t\t\t\t\tmaxWidth={2} // Set the maximum width for the text\r\n\t\t\t\t\t\tlineHeight={1.2} // Adjust the line height if needed\r\n\t\t\t\t\t\toverflowWrap=\"break-word\" // Ensure words break correctly\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{tagline}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t)}\r\n\t\t\t\t<mesh geometry={geometry} position={[0, -0.5, -3]} scale={1.5}>\r\n\t\t\t\t\t<meshBasicMaterial map={texture} />\r\n\t\t\t\t</mesh>\r\n\t\t\t</MeshPortalMaterial>\r\n\t\t</animated.mesh>\r\n\t);\r\n}\r\n\r\nexport default NpgPortalCube;\r\n\r\nconst PortalText: React.FC<{ header?: string; tagline?: string }> = ({ header, tagline }) => {\r\n\tconst fontSize = header === \"Sport &\\nCommunication\" ? 0.3 : 0.4;\r\n\tconst textHeight = header === \"Sport &\\nCommunication\" ? 1.2 : 1.4;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Text\r\n\t\t\t\tfont={`${basePath || \"\"}/fonts/RedHatDisplay-SemiBold.ttf`}\r\n\t\t\t\tcolor=\"#ffffff\"\r\n\t\t\t\tanchorY=\"top\"\r\n\t\t\t\tanchorX=\"left\"\r\n\t\t\t\tposition={[-1.1, 2, 1]}\r\n\t\t\t\tfontSize={fontSize}\r\n\t\t\t>\r\n\t\t\t\t{header}\r\n\t\t\t</Text>\r\n\t\t\t<Text\r\n\t\t\t\tfont={`${basePath || \"\"}/fonts/RedHatDisplay-Regular.ttf`}\r\n\t\t\t\tcolor=\"#ffffff\"\r\n\t\t\t\tanchorY=\"top\"\r\n\t\t\t\tanchorX=\"left\"\r\n\t\t\t\tposition={[-1, textHeight, 1]}\r\n\t\t\t\tfontSize={0.1}\r\n\t\t\t\tmaxWidth={2} // Set the maximum width for the text\r\n\t\t\t\tlineHeight={1.2} // Adjust the line height if needed\r\n\t\t\t\toverflowWrap=\"break-word\" // Ensure words break correctly\r\n\t\t\t>\r\n\t\t\t\t{tagline}\r\n\t\t\t</Text>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst CameraController: React.FC = () => {\r\n  const { camera } = useThree();\r\n  const targetOffset = useRef(new THREE.Vector3()); // Target offset for the camera\r\n  const originalPosition = useRef(camera.position.clone()); // Store the original camera position\r\n  const dampingFactor = 0.01; // Damping factor for smooth movement\r\n  const maxOffset = 1.5; // Max offset for camera movement\r\n  const returnSpeed = 0.02; // Speed at which the camera returns to the original position\r\n  const lastGamma = useRef(0);\r\n  const lastBeta = useRef(0);\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (event: MouseEvent) => {\r\n      const movementX = event.movementX * 0.01 || 0;\r\n      const movementY = event.movementY * 0.01 || 0;\r\n\r\n      targetOffset.current.x = THREE.MathUtils.clamp(targetOffset.current.x + movementX, -maxOffset, maxOffset);\r\n      targetOffset.current.y = THREE.MathUtils.clamp(targetOffset.current.y - movementY, -maxOffset, maxOffset);\r\n    };\r\n\r\n    const handleDeviceOrientation = (event: DeviceOrientationEvent) => {\r\n      if (event.gamma === null || event.beta === null) return;\r\n\r\n      // Find out how much the device has moved since the last event\r\n      const gammaDiff = event.gamma - lastGamma.current;\r\n      const betaDiff = event.beta - lastBeta.current;\r\n\r\n      targetOffset.current.x = THREE.MathUtils.clamp(targetOffset.current.x + gammaDiff * 0.06, -maxOffset, maxOffset);\r\n      targetOffset.current.y = THREE.MathUtils.clamp(targetOffset.current.y - betaDiff * 0.06, -maxOffset, maxOffset);\r\n\r\n      lastGamma.current = event.gamma;\r\n      lastBeta.current = event.beta;\r\n    };\r\n\r\n    // Attach mouse move and device orientation listeners\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n    window.addEventListener(\"deviceorientation\", handleDeviceOrientation);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"deviceorientation\", handleDeviceOrientation);\r\n    };\r\n  }, []);\r\n\r\n  useFrame(() => {\r\n    // Smoothly interpolate the camera position towards the target offset\r\n    camera.position.lerp(originalPosition.current.clone().add(targetOffset.current), dampingFactor);\r\n\r\n    // Gradually move the camera back to the original position when idle\r\n    targetOffset.current.lerp(new THREE.Vector3(0, 0, 0), returnSpeed);\r\n\r\n    // Ensure the camera continues looking at the same point\r\n    camera.lookAt(0, 0, 0);\r\n  });\r\n\r\n  return null; // This component doesn't render anything directly\r\n};\r\n\r\nexport default CameraController;\r\n","import React from \"react\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\n\r\nconst AddCameraParent: React.FC = () => {\r\n  const { scene } = useThree();\r\n\r\n  const cameraParent = new THREE.Group();\r\n  cameraParent.position.set(0, 0, 0);\r\n  cameraParent.name = \"Camera Parent\";\r\n\r\n  // add a group to the scene that will be the parent of the camera\r\n  scene.add(cameraParent);\r\n\r\n  return null;\r\n};\r\n\r\nexport default AddCameraParent;\r\n","import * as THREE from \"three\";\r\nimport { PortalCubeProps } from \"@/app/pages/npgDemo/modules/NpgPortalCube\";\r\nimport { scenePath } from \"@/app/Routing\";\r\n\r\nexport const npgPortalCubeData: PortalCubeProps = {\r\n\tcubeModelPath: scenePath + \"/models/npgCube.glb\",\r\n\trotationSpeed: 0.01,\r\n\tportalData: [\r\n\t\t{\r\n\t\t\tmeshId: \"design\",\r\n\t\t\ttexturePath: scenePath + \"/images/design.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(0, 0, -1),\r\n\t\t\theader: \"Design\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"NPG Design utvikler kreative lÃ¸sninger innen konseptutvikling, 3D-visualisering, grafisk design og merkevareopplevelser.\\n\\nVÃ¥rt designteam stÃ¸tter alt vi gjÃ¸r her pÃ¥ NPG. La oss skape visuelle og strategiske lÃ¸sninger som hever din merkevare.\",\r\n\t\t}, // Back\r\n\t\t{\r\n\t\t\tmeshId: \"event\",\r\n\t\t\ttexturePath: scenePath + \"/images/event.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(0, -1, 0),\r\n\t\t\theader: \"Event\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"I NPG Event skaper vi ikke bare event; vi skaper minneverdige opplevelser som binder mennesker og ideer sammen. \\n\\nVi utvikler unike eventer og mÃ¸teplasser som skaper meningsfulle opplevelser som fremmer kunnskap, innovasjon, samarbeid og bÃ¦rekraft. Ditt eventbyrÃ¥ for nÃ¦ringslivet!\",\r\n\t\t}, // Bottom\r\n\t\t{\r\n\t\t\tmeshId: \"exibition\",\r\n\t\t\ttexturePath: scenePath + \"/images/exibition.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(0, 1, 0),\r\n\t\t\theader: \"Exibition\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"Bli synlig med NPG Exhibition. Vi er det mest erfarne byrÃ¥et i Norge innen messer, med over 30 Ã¥rs ekspertise nasjonalt og internasjonalt. \\n\\nPlanlegger du Ã¥ delta pÃ¥ messer i Norge eller internasjonalt? Benytt NPG, Norges ledende byrÃ¥ innen messestands.\",\r\n\t\t}, // Top\r\n\t\t{\r\n\t\t\tmeshId: \"interactive\",\r\n\t\t\ttexturePath: scenePath + \"/images/interactive.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(1, 0, 0),\r\n\t\t\theader: \"Interactive\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"NPG Interactive skaper engasjerende digitale opplevelser med teknologi og kreativitet, og tilbyr nye mÃ¥ter Ã¥ oppleve produkter og tjenester pÃ¥. \\n\\nHos NPG Interactive kombinerer vi teknologi og kreativitet for Ã¥ skape engasjerende, digitale opplevelser.\",\r\n\t\t}, // Right\r\n\t\t{\r\n\t\t\tmeshId: \"marketing\",\r\n\t\t\ttexturePath: scenePath + \"/images/marketing.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(0, 0, 1),\r\n\t\t\theader: \"Marketing\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"NPG Marketing er et markedsfÃ¸ringsbyrÃ¥ som tilbyr skreddersydde strategier og kreative lÃ¸sninger for Ã¥ styrke din merkevares synlighet og engasjement. \\n\\nNPG Marketing bistÃ¥r bedrifter med markedsfÃ¸ringsstrategier, innholdsproduksjon og digitale kampanjer.\",\r\n\t\t}, // Front\r\n\t\t{\r\n\t\t\tmeshId: \"sport\",\r\n\t\t\ttexturePath: scenePath + \"/images/sport.jpg\",\r\n\t\t\tnormal: new THREE.Vector3(-1, 0, 0),\r\n\t\t\theader: \"Sport &\\nCommunication\",\r\n\t\t\ttagline:\r\n\t\t\t\t\"NPG Sport & Communication er Norges ledende sportsbyrÃ¥. Vi skal vÃ¦re det fremste rÃ¥dgivermiljÃ¸et for virksomheter, profiler og forbund. \\n\\nNPG Sport & Communication er Norges ledende sportsbyrÃ¥. Vi rÃ¥dgir virksomheter, profiler og forbund i skjÃ¦ringspunktet mellom idrett og nÃ¦ringsliv, bÃ¥de nasjonalt og internasjonalt â€“ og tar ogsÃ¥ oppdrag utenfor idretten.\",\r\n\t\t}, // Left\r\n\t],\r\n};\r\n","import React, { useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { Stats } from \"@react-three/drei\";\r\n\r\n// Custom imports\r\nimport \"./modules/NpgPortalCube\";\r\nimport NpgPortalCube from \"./modules/NpgPortalCube\";\r\nimport CameraMovement from \"@/components/3d/CameraMovement\";\r\nimport AddCameraParent from \"@/utils/camera/AddCameraParent\";\r\nimport DynamicCamera from \"@/utils/camera/DynamicCameraFov\";\r\nimport HamburgerMenu from \"@/components/2d/HamburgerMenu\";\r\n\r\nimport { npgPortalCubeData } from \"./data/data\";\r\n\r\nconst App: React.FC = () => {\r\n\tconst [showStats, setShowStats] = useState(false);\r\n\tconst handleToggleStats = () => {\r\n\t\tsetShowStats((prev) => !prev);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ width: \"100vw\", height: \"100vh\", overflow: \"hidden\" }}>\r\n\t\t\t<Canvas\r\n\t\t\t\tcamera={{\r\n\t\t\t\t\tposition: new THREE.Vector3(0, 0, 6),\r\n\t\t\t\t\tfov: 50,\r\n\t\t\t\t\tnear: 0.2,\r\n\t\t\t\t\tfar: 20,\r\n\t\t\t\t}}\r\n\t\t\t\tgl={{\r\n\t\t\t\t\tpowerPreference: \"high-performance\",\r\n\t\t\t\t\talpha: false,\r\n\t\t\t\t\tantialias: true,\r\n\t\t\t\t\tshadowMapEnabled: false,\r\n\t\t\t\t}}\r\n\t\t\t\tshadows={false}\r\n\t\t\t>\r\n\t\t\t\t<color attach=\"background\" args={[\"#ffffff\"]} />\r\n\t\t\t\t<DynamicCamera frameSize={3} />\r\n\t\t\t\t<AddCameraParent />\r\n\t\t\t\t<NpgPortalCube {...npgPortalCubeData} />\r\n\t\t\t\t<CameraMovement />\r\n\t\t\t\t{showStats && <Stats />}\r\n\t\t\t</Canvas>\r\n\t\t\t{/* UI Overlay */}\r\n\t\t\t<div id=\"ui-overlay\" style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\", pointerEvents: \"none\" }}>\r\n\t\t\t\t<HamburgerMenu showStats={showStats} onToggleStats={handleToggleStats} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n"],"names":["React.useEffect","THREE.ShaderMaterial","THREE.UniformsUtils","THREE.MathUtils","React.useMemo","target","THREE.WebGLRenderTarget","THREE.LinearFilter","THREE.HalfFloatType","THREE.DepthTexture","THREE.FloatType","React.useLayoutEffect","React.useRef","React.forwardRef","React.useState","THREE.Scene","React.useCallback","THREE.Object3D","React.useImperativeHandle","React.createElement","React.Fragment","THREE.Vector2","THREE.Mesh","THREE.MeshBasicMaterial","THREE.Box3","THREE.OrthographicCamera","blend","quad","THREE.LinearMipmapLinearFilter","THREE.RedFormat","THREE.NearestFilter","useRef","useState","useEffect","jsx","THREE.Quaternion","THREE.Vector3","useMemo","THREE.TextureLoader","THREE.Euler","targetRotation","THREE.Color","jsxs","Fragment","THREE.Group","DynamicCamera","CameraMovement"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}